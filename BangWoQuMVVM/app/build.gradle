import java.security.MessageDigest

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 29
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.zues.ruiyu.bangwoqu"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 8
        versionName "1.2.6"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -frtti -fexceptions -Wno-format"
                arguments '-DANDROID_PLATFORM=android-23', '-DANDROID_STL=c++_shared' ,"-DANDROID_ARM_NEON=TRUE"
            }
        }
        ndk {
            // abiFilters "arm64-v8a", "armeabi-v7a"
            abiFilters   "arm64-v8a", "armeabi-v7a"
            ldLibs "jnigraphics"
        }

    }
    signingConfigs{
        config {
        try {
            storeFile file("../mobdatas_key.jks")
            storePassword "ruiyu@mobdatas"
            keyAlias "key"
            keyPassword "ruiyu@mobdatas"
            v1SigningEnabled true
            v2SigningEnabled true
        }
        catch (ex) {
            ex.printStackTrace()
            throw new InvalidUserDataException("秘钥用户名或密码错误${ex.getMessage()}")
        }}
    }


    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null &&
                    outputFile.name.endsWith(".apk") &&
                    "release" == variant.buildType.name) {
                variant.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + File.separator + "builtFlavors")
                outputFileName = "bangwoqu_v${variant.versionName}+${variant.versionCode}_${buildTime()}_${variant.flavorName}_release.apk"
            }
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.config
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    android {
        lintOptions {
            checkReleaseBuilds false
            // Or, if you prefer, you can continue to check for errors in release builds,
            // but continue the build even when errors are found:
            abortOnError false
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
    ndkVersion '21.1.6352462'

}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.google.android.material:material:1.2.1'
    implementation files('src\\main\\java\\com\\zues\\ruiyu\\bangwoqu\\PadleLite\\java\\PaddlePredictor.jar')
    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    //QRCODE
    implementation project(path: ':zxing')
    implementation project(path: ':areaselectorlibrary')
    implementation project(path: ':swipemenulib')

    implementation 'com.rmtheis:tess-two:9.0.0'

    //http
    implementation "com.squareup.retrofit2:retrofit:2.6.2"
    implementation "com.squareup.retrofit2:converter-gson:2.6.2"
    implementation "com.squareup.retrofit2:adapter-rxjava2:2.5.0"
    implementation "com.squareup.okhttp3:okhttp:3.4.1"
    implementation "com.squareup.okhttp3:logging-interceptor:3.4.1"
    implementation "io.reactivex.rxjava2:rxkotlin:2.3.0"
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"

    implementation "org.jetbrains.anko:anko:0.10.8"
    implementation "com.kingja.loadsir:loadsir:1.3.6"
    implementation 'com.github.bumptech.glide:glide:4.5.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.5.0'
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.47'
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation 'com.github.addappcn:android-pickers:2.0.0'
    implementation 'com.alibaba:fastjson:1.2.48'
    implementation 'com.google.android.material:material:1.2.1'


    implementation 'com.github.youlookwhat:WebProgress:1.1.0'
    //1.1.0 API改动过大，老用户升级需谨慎
    implementation 'com.scwang.smartrefresh:SmartRefreshLayout:1.1.0-alpha-14'
    implementation 'com.scwang.smartrefresh:SmartRefreshHeader:1.1.0-alpha-14'//没有使用特殊Header，可以不加这行
    implementation 'com.jaeger.statusbarutil:library:1.4.0'
    implementation "androidx.paging:paging-runtime-ktx:2.1.2"

    // 基础依赖包，必须要依赖
    implementation 'com.gyf.immersionbar:immersionbar:3.0.0'
// fragment快速实现（可选）
    implementation 'com.gyf.immersionbar:immersionbar-components:3.0.0'
// kotlin扩展（可选）
    implementation 'com.gyf.immersionbar:immersionbar-ktx:3.0.0'

    // MMKV
    implementation 'com.tencent:mmkv-static:1.2.5'

    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    //lifecycle
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.0-beta01'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0-beta01'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.0-beta01'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-savedstate:2.3.0-beta01'
    //协程
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'



    implementation 'com.github.chinalwb:slidetoconfirm:1.0.3'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.2'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.2'

    implementation 'com.github.chrisbanes:PhotoView:2.0.0'

    implementation 'org.litepal.android:kotlin:3.0.0'
}


def archives = [
        [
                'src' : 'https://paddlelite-demo.bj.bcebos.com/libs/android/paddle_lite_libs_v2_6_1.tar.gz',
                'dest': 'PaddleLite'
        ],
        [
                'src' : 'https://paddlelite-demo.bj.bcebos.com/libs/android/opencv-4.2.0-android-sdk.tar.gz',
                'dest': 'OpenCV'
        ],
        [
                'src' : 'https://paddleocr.bj.bcebos.com/deploy/lite/ocr_v1_for_cpu.tar.gz',
                'dest' : 'src/main/assets/models/ocr_v1_for_cpu'
        ]
]

task downloadAndExtractArchives(type: DefaultTask) {
    doFirst {
        println "Downloading and extracting archives including libs and models"
    }
    doLast {
        // Prepare cache folder for archives
        String cachePath = "cache"
        if (!file("${cachePath}").exists()) {
            mkdir "${cachePath}"
        }
        archives.eachWithIndex { archive, index ->
            MessageDigest messageDigest = MessageDigest.getInstance('MD5')
            messageDigest.update(archive.src.bytes)
            String cacheName = new BigInteger(1, messageDigest.digest()).toString(32)
            // Download the target archive if not exists
            boolean copyFiles = !file("${archive.dest}").exists()
            if (!file("${cachePath}/${cacheName}.tar.gz").exists()) {
                ant.get(src: archive.src, dest: file("${cachePath}/${cacheName}.tar.gz"))
                copyFiles = true; // force to copy files from the latest archive files
            }
            // Extract the target archive if its dest path does not exists
            if (copyFiles) {
                copy {
                    from tarTree("${cachePath}/${cacheName}.tar.gz")
                    into "${archive.dest}"
                }
            }
        }
    }
}
preBuild.dependsOn downloadAndExtractArchives
def static buildTime() {
    return new Date().format("MMdd-HHmmss")
}